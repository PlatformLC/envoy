/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __REUSEPORT_BPF_SKEL_H__
#define __REUSEPORT_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

typedef struct {
    __u32 total_sockets;
	// add more config-like data here
} global_rodata_t;

struct reuseport_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *index_map;
		struct bpf_map *reuseport_map;
		struct bpf_map *bss;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *select_sock;
	} progs;
	struct {
		struct bpf_link *select_sock;
	} links;
	struct reuseport_bpf__bss {
		__u32 idx;
	} *bss;
	struct reuseport_bpf__rodata {
		global_rodata_t rodata;
	} *rodata;

#ifdef __cplusplus
	static inline struct reuseport_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct reuseport_bpf *open_and_load();
	static inline int load(struct reuseport_bpf *skel);
	static inline int attach(struct reuseport_bpf *skel);
	static inline void detach(struct reuseport_bpf *skel);
	static inline void destroy(struct reuseport_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
reuseport_bpf__destroy(struct reuseport_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
reuseport_bpf__create_skeleton(struct reuseport_bpf *obj);

static inline struct reuseport_bpf *
reuseport_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct reuseport_bpf *obj;
	int err;

	obj = static_cast<struct reuseport_bpf *>(calloc(1, sizeof(*obj)));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = reuseport_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	reuseport_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct reuseport_bpf *
reuseport_bpf__open(void)
{
	return reuseport_bpf__open_opts(NULL);
}

static inline int
reuseport_bpf__load(struct reuseport_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct reuseport_bpf *
reuseport_bpf__open_and_load(void)
{
	struct reuseport_bpf *obj;
	int err;

	obj = reuseport_bpf__open();
	if (!obj)
		return NULL;
	err = reuseport_bpf__load(obj);
	if (err) {
		reuseport_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
reuseport_bpf__attach(struct reuseport_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
reuseport_bpf__detach(struct reuseport_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *reuseport_bpf__elf_bytes(size_t *sz);

static inline int
reuseport_bpf__create_skeleton(struct reuseport_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = reinterpret_cast<struct bpf_object_skeleton *>(calloc(1, sizeof(*s)));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "reuseport_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 4;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = reinterpret_cast<struct bpf_map_skeleton *>(calloc(s->map_cnt, s->map_skel_sz));
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "index_map";
	s->maps[0].map = &obj->maps.index_map;

	s->maps[1].name = "reuseport_map";
	s->maps[1].map = &obj->maps.reuseport_map;

	s->maps[2].name = "reusepor.bss";
	s->maps[2].map = &obj->maps.bss;
	s->maps[2].mmaped = reinterpret_cast<void **>(&obj->bss);

	s->maps[3].name = "reusepor.rodata";
	s->maps[3].map = &obj->maps.rodata;
	s->maps[3].mmaped = reinterpret_cast<void **>(&obj->rodata);

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = reinterpret_cast<struct bpf_prog_skeleton *>(calloc(s->prog_cnt, s->prog_skel_sz));
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "select_sock";
	s->progs[0].prog = &obj->progs.select_sock;
	s->progs[0].link = &obj->links.select_sock;

	s->data = const_cast<void *>(reinterpret_cast<const void *>(reuseport_bpf__elf_bytes(&s->data_sz)));

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *reuseport_bpf__elf_bytes(size_t *sz)
{
	*sz = 4008;
	return static_cast<const void *>("\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe8\x0c\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x73\x6b\
\x5f\x72\x65\x75\x73\x65\x70\x6f\x72\x74\0\x2e\x62\x73\x73\0\x2e\x72\x6f\x64\
\x61\x74\x61\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x72\x65\x75\
\x73\x65\x70\x6f\x72\x74\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x32\0\
\x73\x65\x6c\x65\x63\x74\x5f\x73\x6f\x63\x6b\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\
\x4c\x49\x43\x45\x4e\x53\x45\0\x69\x64\x78\0\x69\x6e\x64\x65\x78\x5f\x6d\x61\
\x70\0\x72\x65\x75\x73\x65\x70\x6f\x72\x74\x5f\x6d\x61\x70\0\x72\x6f\x64\x61\
\x74\x61\0\x73\x65\x6c\x65\x63\x74\x5f\x73\x6f\x63\x6b\0\x2e\x72\x65\x6c\x73\
\x6b\x5f\x72\x65\x75\x73\x65\x70\x6f\x72\x74\0\x2e\x42\x54\x46\0\x2e\x42\x54\
\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x39\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\0\0\0\0\0\x03\
\0\x60\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\x01\0\x05\0\x04\0\0\0\0\0\0\0\
\x18\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\x11\0\x07\0\0\0\0\0\0\0\
\0\0\x04\0\0\0\0\0\0\0\x6c\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\x70\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x7a\0\0\0\x11\0\x06\0\
\x20\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x88\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\x8f\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x70\x01\0\0\0\0\0\0\xbf\
\x16\0\0\0\0\0\0\xb7\x07\0\0\0\0\0\0\x63\x7a\xfc\xff\0\0\0\0\x63\x7a\xf8\xff\0\
\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x08\0\0\0\0\0\0\x15\x08\x21\0\0\0\0\0\xbf\
\x89\0\0\0\0\0\0\x07\x09\0\0\x04\0\0\0\xbf\x91\0\0\0\0\0\0\x85\0\0\0\x5d\0\0\0\
\x61\x87\0\0\0\0\0\0\x07\x07\0\0\x01\0\0\0\x63\x78\0\0\0\0\0\0\xbf\x91\0\0\0\0\
\0\0\x85\0\0\0\x5e\0\0\0\x67\x07\0\0\x20\0\0\0\x77\x07\0\0\x20\0\0\0\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x12\0\0\0\0\0\0\xbf\x73\0\0\0\0\0\0\x3f\x23\0\0\
\0\0\0\0\x2f\x23\0\0\0\0\0\0\x1f\x37\0\0\0\0\0\0\x63\x7a\xfc\xff\0\0\0\0\x61\
\x14\0\0\0\0\0\0\x18\x01\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x18\0\0\0\
\xbf\x73\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xfc\
\xff\xff\xff\xbf\x61\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\
\0\0\0\0\0\x85\0\0\0\x52\0\0\0\xb7\x07\0\0\x01\0\0\0\xbf\x70\0\0\0\0\0\0\x95\0\
\0\0\0\0\0\0\0\0\0\0\x61\x73\x73\x69\x67\x6e\x20\x74\x6f\x20\x74\x68\x72\x65\
\x61\x64\x20\x25\x64\x2f\x25\x64\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\x30\0\0\0\0\0\0\0\x01\0\0\0\x08\0\0\0\
\xb0\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\xf8\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\
\x38\x01\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xcc\
\x03\0\0\xcc\x03\0\0\x66\x03\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x01\0\0\0\x02\0\
\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\x40\0\0\0\x12\0\0\0\x08\0\0\0\x80\0\0\0\x16\0\
\0\0\x0b\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\x02\x04\0\0\0\x1c\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x02\0\0\0\x20\0\
\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x07\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x34\0\0\
\0\0\0\0\x08\x0a\0\0\0\x3a\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x02\x0c\0\0\0\x47\0\0\0\0\0\0\x08\x0d\0\0\0\0\0\0\0\x02\0\0\x04\x08\0\0\0\x4f\
\0\0\0\x09\0\0\0\0\0\0\0\x53\0\0\0\x0e\0\0\0\x20\0\0\0\x58\0\0\0\x01\0\0\x04\
\x04\0\0\0\x66\0\0\0\x09\0\0\0\0\0\0\0\x6a\0\0\0\0\0\0\x0e\x01\0\0\0\x01\0\0\0\
\0\0\0\0\x04\0\0\x04\x20\0\0\0\x01\0\0\0\x11\0\0\0\0\0\0\0\x06\0\0\0\x13\0\0\0\
\x40\0\0\0\x12\0\0\0\x08\0\0\0\x80\0\0\0\x16\0\0\0\x08\0\0\0\xc0\0\0\0\0\0\0\0\
\0\0\0\x02\x12\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x14\0\0\0\0\
\0\0\0\0\0\0\x02\x14\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\xff\
\xff\0\0\x74\0\0\0\0\0\0\x0e\x10\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x17\0\0\0\
\x82\0\0\0\x07\0\0\x04\x28\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\
\x40\0\0\0\x92\0\0\0\x09\0\0\0\x80\0\0\0\x96\0\0\0\x09\0\0\0\xa0\0\0\0\xa3\0\0\
\0\x09\0\0\0\xc0\0\0\0\xaf\0\0\0\x09\0\0\0\xe0\0\0\0\xba\0\0\0\x09\0\0\0\0\x01\
\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\xbf\0\0\0\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x02\0\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\xc4\0\0\0\x19\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\x0d\x03\0\0\0\xcd\0\0\0\x16\0\0\0\xd6\0\0\0\x01\0\0\x0c\x1b\0\0\0\x4f\
\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x1f\0\0\0\0\0\0\0\0\0\0\
\x09\x20\0\0\0\xe2\0\0\0\0\0\0\x08\x21\0\0\0\0\0\0\0\x01\0\0\x04\x04\0\0\0\xf2\
\0\0\0\x09\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\x0e\x1e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\x0a\x24\0\0\0\x07\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\
\0\0\0\x23\0\0\0\x05\0\0\0\x18\0\0\0\x0c\x01\0\0\0\0\0\x0e\x25\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\0\0\0\x24\0\0\0\x05\0\0\0\x04\0\0\0\x20\x01\0\0\0\0\0\x0e\
\x27\0\0\0\x01\0\0\0\x3e\x03\0\0\x01\0\0\x0f\x04\0\0\0\x1d\0\0\0\0\0\0\0\x04\0\
\0\0\x43\x03\0\0\x02\0\0\x0f\x1c\0\0\0\x22\0\0\0\0\0\0\0\x04\0\0\0\x26\0\0\0\
\x04\0\0\0\x18\0\0\0\x4b\x03\0\0\x02\0\0\x0f\x40\0\0\0\x0f\0\0\0\0\0\0\0\x20\0\
\0\0\x15\0\0\0\x20\0\0\0\x20\0\0\0\x51\x03\0\0\x01\0\0\x0f\x04\0\0\0\x28\0\0\0\
\0\0\0\0\x04\0\0\0\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\
\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\x33\x32\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x69\x6e\x64\x65\x78\x5f\
\x74\0\x69\x64\x78\0\x6c\x6f\x63\x6b\0\x62\x70\x66\x5f\x73\x70\x69\x6e\x5f\x6c\
\x6f\x63\x6b\0\x76\x61\x6c\0\x69\x6e\x64\x65\x78\x5f\x6d\x61\x70\0\x72\x65\x75\
\x73\x65\x70\x6f\x72\x74\x5f\x6d\x61\x70\0\x73\x6b\x5f\x72\x65\x75\x73\x65\x70\
\x6f\x72\x74\x5f\x6d\x64\0\x6c\x65\x6e\0\x65\x74\x68\x5f\x70\x72\x6f\x74\x6f\
\x63\x6f\x6c\0\x69\x70\x5f\x70\x72\x6f\x74\x6f\x63\x6f\x6c\0\x62\x69\x6e\x64\
\x5f\x69\x6e\x61\x6e\x79\0\x68\x61\x73\x68\0\x64\x61\x74\x61\0\x64\x61\x74\x61\
\x5f\x65\x6e\x64\0\x72\x65\x75\x73\x65\x5f\x6d\x64\0\x73\x65\x6c\x65\x63\x74\
\x5f\x73\x6f\x63\x6b\0\x67\x6c\x6f\x62\x61\x6c\x5f\x72\x6f\x64\x61\x74\x61\x5f\
\x74\0\x74\x6f\x74\x61\x6c\x5f\x73\x6f\x63\x6b\x65\x74\x73\0\x72\x6f\x64\x61\
\x74\x61\0\x63\x68\x61\x72\0\x73\x65\x6c\x65\x63\x74\x5f\x73\x6f\x63\x6b\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2f\x68\x6f\x6d\
\x65\x2f\x6c\x69\x63\x68\x75\x6e\x2f\x72\x65\x75\x73\x65\x70\x6f\x72\x74\x2f\
\x72\x65\x75\x73\x65\x70\x6f\x72\x74\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\
\x73\x65\x6c\x65\x63\x74\x5f\x73\x6f\x63\x6b\x28\x73\x74\x72\x75\x63\x74\x20\
\x73\x6b\x5f\x72\x65\x75\x73\x65\x70\x6f\x72\x74\x5f\x6d\x64\x20\x2a\x72\x65\
\x75\x73\x65\x5f\x6d\x64\x29\0\x09\x5f\x5f\x75\x33\x32\x20\x69\x6e\x64\x65\x78\
\x20\x3d\x20\x30\x3b\0\x09\x5f\x5f\x75\x33\x32\x20\x69\x6e\x64\x65\x78\x5f\x7a\
\x65\x72\x6f\x20\x3d\x20\x30\x3b\0\x09\x69\x64\x78\x20\x3d\x20\x62\x70\x66\x5f\
\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x69\x6e\
\x64\x65\x78\x5f\x6d\x61\x70\x2c\x20\x26\x69\x6e\x64\x65\x78\x5f\x7a\x65\x72\
\x6f\x29\x3b\0\x09\x69\x66\x20\x28\x21\x69\x64\x78\x29\x20\x7b\0\x09\x62\x70\
\x66\x5f\x73\x70\x69\x6e\x5f\x6c\x6f\x63\x6b\x28\x26\x69\x64\x78\x2d\x3e\x6c\
\x6f\x63\x6b\x29\x3b\0\x09\x69\x6e\x64\x65\x78\x20\x3d\x20\x2b\x2b\x28\x69\x64\
\x78\x2d\x3e\x69\x64\x78\x29\x3b\0\x09\x62\x70\x66\x5f\x73\x70\x69\x6e\x5f\x75\
\x6e\x6c\x6f\x63\x6b\x28\x26\x69\x64\x78\x2d\x3e\x6c\x6f\x63\x6b\x29\x3b\0\x09\
\x69\x6e\x64\x65\x78\x20\x3d\x20\x69\x6e\x64\x65\x78\x20\x25\x20\x72\x6f\x64\
\x61\x74\x61\x2e\x74\x6f\x74\x61\x6c\x5f\x73\x6f\x63\x6b\x65\x74\x73\x3b\0\x09\
\x64\x62\x67\x28\x22\x61\x73\x73\x69\x67\x6e\x20\x74\x6f\x20\x74\x68\x72\x65\
\x61\x64\x20\x25\x64\x2f\x25\x64\x5c\x6e\x22\x2c\x20\x69\x6e\x64\x65\x78\x2c\
\x20\x72\x6f\x64\x61\x74\x61\x2e\x74\x6f\x74\x61\x6c\x5f\x73\x6f\x63\x6b\x65\
\x74\x73\x29\x3b\0\x09\x65\x72\x72\x20\x3d\x20\x62\x70\x66\x5f\x73\x6b\x5f\x73\
\x65\x6c\x65\x63\x74\x5f\x72\x65\x75\x73\x65\x70\x6f\x72\x74\x28\x72\x65\x75\
\x73\x65\x5f\x6d\x64\x2c\x20\x26\x72\x65\x75\x73\x65\x70\x6f\x72\x74\x5f\x6d\
\x61\x70\x2c\x20\x26\x69\x6e\x64\x65\x78\x2c\0\x09\x72\x65\x74\x75\x72\x6e\x20\
\x72\x65\x73\x75\x6c\x74\x20\x3c\x20\x50\x41\x53\x53\x20\x3f\x20\x53\x4b\x5f\
\x44\x52\x4f\x50\x20\x3a\x20\x53\x4b\x5f\x50\x41\x53\x53\x3b\x20\x2f\x2f\x20\
\x69\x66\x20\x53\x4b\x5f\x44\x52\x4f\x50\x2c\x20\x77\x69\x6c\x6c\x20\x66\x61\
\x6c\x6c\x62\x61\x63\x6b\x20\x74\x6f\x20\x6b\x65\x72\x6e\x20\x73\x65\x6c\x65\
\x63\x74\x69\x6f\x6e\0\x2e\x62\x73\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x6d\
\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x73\x6b\x5f\x72\x65\x75\x73\x65\
\x70\x6f\x72\x74\0\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\
\0\0\x2c\x01\0\0\x40\x01\0\0\0\0\0\0\x08\0\0\0\x59\x03\0\0\x01\0\0\0\0\0\0\0\
\x1c\0\0\0\x10\0\0\0\x59\x03\0\0\x12\0\0\0\0\0\0\0\x28\x01\0\0\x4f\x01\0\0\0\
\x1c\x01\0\x10\0\0\0\x28\x01\0\0\x81\x01\0\0\x08\x28\x01\0\x18\0\0\0\x28\x01\0\
\0\x93\x01\0\0\x08\x2c\x01\0\x28\0\0\0\x28\x01\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\
\x28\x01\0\0\xaa\x01\0\0\x08\x40\x01\0\x50\0\0\0\x28\x01\0\0\xdf\x01\0\0\x06\
\x44\x01\0\x58\0\0\0\x28\x01\0\0\xec\x01\0\0\x16\x54\x01\0\x68\0\0\0\x28\x01\0\
\0\xec\x01\0\0\x02\x54\x01\0\x78\0\0\0\x28\x01\0\0\x08\x02\0\0\x0a\x58\x01\0\
\x90\0\0\0\x28\x01\0\0\x1f\x02\0\0\x02\x5c\x01\0\xa0\0\0\0\x28\x01\0\0\x08\x02\
\0\0\x0a\x58\x01\0\xb0\0\0\0\x28\x01\0\0\x3d\x02\0\0\x19\x74\x01\0\xc8\0\0\0\
\x28\x01\0\0\x3d\x02\0\0\x10\x74\x01\0\xe8\0\0\0\x28\x01\0\0\x3d\x02\0\0\x08\
\x74\x01\0\xf0\0\0\0\x28\x01\0\0\x64\x02\0\0\x02\x78\x01\0\x28\x01\0\0\x28\x01\
\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\x28\x01\0\0\xa3\x02\0\0\x08\x7c\x01\0\x60\x01\
\0\0\x28\x01\0\0\xe4\x02\0\0\x02\x9c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\
\0\0\0\0\xba\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\x20\x01\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x02\0\0\0\0\0\0\x70\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\0\0\0\x08\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x03\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\0\0\0\x01\0\0\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x90\x03\0\0\0\0\0\0\x1c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2b\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xb0\x03\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x31\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x03\
\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x9b\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x03\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xac\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x04\0\0\0\0\0\0\x4a\x07\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb1\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x0b\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
}

#ifdef __cplusplus
struct reuseport_bpf *reuseport_bpf::open(const struct bpf_object_open_opts *opts) { return reuseport_bpf__open_opts(opts); }
struct reuseport_bpf *reuseport_bpf::open_and_load() { return reuseport_bpf__open_and_load(); }
int reuseport_bpf::load(struct reuseport_bpf *skel) { return reuseport_bpf__load(skel); }
int reuseport_bpf::attach(struct reuseport_bpf *skel) { return reuseport_bpf__attach(skel); }
void reuseport_bpf::detach(struct reuseport_bpf *skel) { reuseport_bpf__detach(skel); }
void reuseport_bpf::destroy(struct reuseport_bpf *skel) { reuseport_bpf__destroy(skel); }
const void *reuseport_bpf::elf_bytes(size_t *sz) { return reuseport_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
reuseport_bpf__assert(struct reuseport_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->idx) == 4, "unexpected size of 'idx'");
	_Static_assert(sizeof(s->rodata->rodata) == 4, "unexpected size of 'rodata'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __REUSEPORT_BPF_SKEL_H__ */
